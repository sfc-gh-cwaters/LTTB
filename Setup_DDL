-- ************************************** iot_unit
CREATE TABLE iot_unit
(
 unit_uid       integer NOT NULL,
 unit_name      varchar NOT NULL,
 unit_long_name varchar,
 category       varchar,
 dscr           varchar,
 dimension      varchar,

 CONSTRAINT PK_1 PRIMARY KEY ( unit_uid )
);

-- ************************************** _base_day
CREATE TABLE iot_base_day
(
 day_index      integer NOT NULL,
 date_value     date NOT NULL,
 day_name       varchar NOT NULL,
 month_name     varchar NOT NULL,
 eom            date NOT NULL COMMENT 'end of month',
 year           integer NOT NULL,
 year_month     integer NOT NULL COMMENT '1-12',
 year_half      integer NOT NULL COMMENT '1 or 2',
 year_quarter   integer NOT NULL COMMENT '1, 2, 3, 4',
 year_week      integer NOT NULL,
 year_day       integer NOT NULL,
 days_in_month  integer NOT NULL,
 dofw_sun_start integer NOT NULL,
 dofw_sat_start integer NOT NULL,
 dofw_fri_start integer NOT NULL,
 dofw_thu_start integer NOT NULL,
 dofw_wed_start integer NOT NULL,
 dofw_tue_start integer NOT NULL,
 dofw_mon_start integer NOT NULL,
 eow_sun_start  date NOT NULL COMMENT 'end of week - ending Tuesday',
 eow_sat_start  date NOT NULL COMMENT 'end of week - ending Wednesday',
 eow_fri_start  date NOT NULL COMMENT 'end of week - ending Thursday',
 eow_thu_start  date NOT NULL COMMENT 'end of week - ending Friday',
 eow_wed_start  date NOT NULL COMMENT 'end of week - ending Saturday',
 eow_tue_start  date NOT NULL COMMENT 'end of week - ending Sunday',
 eow_mon_start  date NOT NULL COMMENT 'end of week - ending Monday',

 CONSTRAINT PK_1 PRIMARY KEY ( day_index )
)
COMMENT = 'Table for ALL days';


-- ************************************** iot_tag
CREATE or replace TABLE iot_tag
(
 hk_tag        binary NOT NULL,
 tagname       varchar NOT NULL,
 record_source varchar NOT NULL,
 data_type     varchar NOT NULL COMMENT 'text, number, timestamp, date',
 dimension     varchar COMMENT 'temperature, pressure, volume, level, flow rate, voltage, etc.',
 time_zone     varchar,
 measure_type  varchar COMMENT 'Standard Measure - Tubing pressure, tank level, Ambient Temperature, etc.  UDC (user defined Code)',
 dscr          varchar,
 unit_uid      integer,
 eng_min_val   number(38,10),
 eng_max_val   number(38,10),
 min_val       number(38,10),
 max_val       number(38,10),
 max_rate      number(38,0),
 sdt_deadband  number(38,10),
 load_ts       timestamp_tz NOT NULL DEFAULT current_timestamp(),
 dv_hashdiff   binary NOT NULL,

 CONSTRAINT PK_1 PRIMARY KEY ( hk_tag ),
 CONSTRAINT FK_34 FOREIGN KEY ( unit_uid ) REFERENCES iot_unit ( unit_uid )
);

-- ************************************** iot_tag_value
CREATE or replace TABLE iot_tag_value
(
 hk_tag        binary NOT NULL,
 tstamp        timestamp_tz NOT NULL,
 record_source varchar NOT NULL,
 val_number    float,
 val_text      varchar,
 quality       integer,
 d             date NOT NULL,
 unit_uid      integer,
 day_index     integer NOT NULL,
 second_index  number(19,0) NOT NULL,
 ms_index      number(19,0) NOT NULL,
 ep_seconds    number(14,0) NOT NULL,
 edit_comment  varchar,
 load_ts       timestamp_tz NOT NULL DEFAULT current_timestamp(),
 CONSTRAINT PK_1 PRIMARY KEY ( hk_tag, tstamp ),
 CONSTRAINT FK_39_2 FOREIGN KEY ( unit_uid ) REFERENCES iot_unit ( unit_uid ),
 CONSTRAINT FK_68_2 FOREIGN KEY ( second_index ) REFERENCES iot_base_second ( second_index ),
 CONSTRAINT FK_69_1 FOREIGN KEY ( hk_tag ) REFERENCES iot_tag ( hk_tag ),
 CONSTRAINT FK_70 FOREIGN KEY ( ms_index ) REFERENCES iot_base_millisecond ( ms_index ),
 CONSTRAINT FK_71 FOREIGN KEY ( day_index ) REFERENCES iot_base_day ( day_index )
);

insert into IOT_base_day (select
    n day_index,
    dateadd(day, n-1, to_date('1/1/1900', 'MM/DD/YYYY')) date_value,
    dayname(date_value) day_name,
    monthname(date_value) month_name,
    last_day(date_value) eom,
    year(date_value) year,
    month(date_value) year_month,
    case when year_month < 7 then 1 else 2 end year_half,
    case when year_month < 4 then 1 when year_month between 4 and 6 then 2 when year_month between 7 and 9 then 3 else 4 end year_quarter,
    week(date_value) year_week,
    day(date_value) year_day,
    dayofmonth(eom) days_in_month,
    dayofweek(date_value) dofw_sun,
    dayofweek(dateadd(day, 1, date_value)) dofw_sat,
    dayofweek(dateadd(day, 2, date_value)) dofw_fri,
    dayofweek(dateadd(day, 3, date_value)) dofw_thu,
    dayofweek(dateadd(day, 4, date_value)) dofw_wed,
    dayofweek(dateadd(day, 5, date_value)) dofw_tue,
    dayofweek(dateadd(day, 6, date_value)) dofw_mon,
    decode(dofw_sun, 0, date_value, dateadd(day, 7 - dofw_sun, date_value)) eow_sun,
    decode(dofw_sun, 0, date_value, dateadd(day, 7 - dofw_sat, date_value)) eow_sat,
    decode(dofw_fri, 0, date_value, dateadd(day, 7 - dofw_fri, date_value)) eow_fri,
    decode(dofw_thu, 0, date_value, dateadd(day, 7 - dofw_thu, date_value)) eow_thu,
    decode(dofw_fri, 0, date_value, dateadd(day, 7 - dofw_wed, date_value)) eow_wed,
    decode(dofw_fri, 0, date_value, dateadd(day, 7 - dofw_tue, date_value)) eow_tue,
    decode(dofw_fri, 0, date_value, dateadd(day, 7 - dofw_mon, date_value)) eow_mon
from
    (select row_number() over (order by seq4()) n from table(generator(rowcount => 100000))));
 
insert into iot_tag (tagname, record_source, hk_tag, data_type, dv_hashdiff) (select 'SIMPLE1', 'DEMO' , md5_binary('DEMO^SIMPLE1'), 'NUMBER', md5_binary('NUMBER'));
insert into iot_tag (tagname, record_source, hk_tag, data_type, dv_hashdiff) (select 'NOISY', 'DEMO' , md5_binary('DEMO^NOISY'), 'NUMBER', md5_binary('NUMBER'));
insert into iot_tag (tagname, record_source, hk_tag, data_type, dv_hashdiff) (select 'INCREASING', 'DEMO' , md5_binary('DEMO^INCREASING'), 'NUMBER', md5_binary('NUMBER'));

create or replace view iot_tag_value_dv as
(select 
    hk_tag,
    tagname,
    tstamp,
    record_source,
    val_number,
    val_text,
    quality,
    d,
    unit_name,
    unit_uid,
    day_index,
    second_index,
    ms_index,
    ep_seconds
from (
    select
        v.hk_tag,
        t.tagname,
        v.tstamp,
        v.record_source,
        v.val_number,
        v.val_text,
        v.quality,
        v.d,
        u.unit_name,
        v.unit_uid,
        v.day_index,
        v.second_index,
        v.ms_index,
        v.ep_seconds,
        v.edit_comment,
        v.load_ts,
        lead(v.load_ts) over (partition by v.hk_tag, v.tstamp order by v.load_ts) next_version
    from
        iot_tag_value v inner join iot_tag t on v.hk_tag = t.hk_tag
        left join iot_unit u on t.unit_uid = u.unit_uid)
    where next_version is null);

create or replace function down_sample_lttb(
        V_SOURCE VARCHAR,
        V_TAGNAME VARCHAR,
        V_STARTTIME TIMESTAMP_TZ,
        V_ENDTIME TIMESTAMP_TZ,
        V_BUCKET_SIZE NUMBER)
    returns table (
        SOURCE VARCHAR,
        TAGNAME VARCHAR,
        HK_TAG BINARY,
        TSTAMP TIMESTAMP_TZ,
        VAL_NUMBER FLOAT)
LANGUAGE SQL
AS $$
with
    vals as (
        select
            ep_seconds x,
            val_number y,
            rank() over (order by d, ep_seconds) idx,
        from
            iot_tag_value_dv
        where
            record_source = V_SOURCE
            and tagname = V_TAGNAME
            and d between to_date(V_STARTTIME) and to_date(V_ENDTIME)
            and tstamp between V_STARTTIME and V_ENDTIME),
    mx as ( -- one line of stats needed to do the calc
        select
            max(idx) m,
            round(m / V_BUCKET_SIZE + .5) group_count
        from
            vals),
    group_values as ( -- generate a grouping set based on the divider num rows / number of buckets
        select
            v.x,
            v.y,
            v.idx,
            round(v.idx / V_BUCKET_SIZE + .5, 0) group_n
        from
            vals v,
            mx
        where
            v.idx > 1 and v.idx < mx.m
        union all
            select x, y, 1, 0 group_n from vals where idx = 1 -- get the first sample in its own group
        union all
            select vals.x, vals.y, mx.m idx, mx.group_count group_n from vals, mx where vals.idx = mx.m), -- the last sample in its own group
    group_averages as (
        select -- required by algorithm for third bucket
            group_n,
            avg(x) xavg,
            avg(y) yavg
        from
            group_values
        group by
            group_n),
    ab_group_values as ( -- pre calculate every possible 3 group with all possible bucket 1 values, each bucket 2 value and the average of bucket 3s
        select
            b.group_n,
            a.x x1,
            a.y y1,
            b.x x2,
            b.y y2,
            av.xavg x3,
            av.yavg y3,
            abs(x1 * y2 + x2 * y3 + x3 * y1 - x1 * y3 - x2 * y1 - x3 * y2) / 2 area,
            lead(area) over (partition by b.group_n order by b.group_n, area) next_area
        from
            group_values a, -- first bucket
            group_values b, -- second (working) bucket
            group_averages av -- third bucket
        where
            a.group_n = b.group_n - 1
            and b.group_n = av.group_n
    ),
    final as (
        select -- include first value
            ga.xavg x,
            ga.yavg y
        from
            group_averages ga
        where
            ga.group_n = 0
        union all
        select
            x2 x,
            y2 y
        from
            ab_group_values
        where
            next_area is null -- pick the largest in each group
        )
select
    V_SOURCE record_source,
    V_TAGNAME tagname,      
    t.hk_tag,
    to_timestamp_tz(to_char(to_timestamp_ntz(f.x))||' +0000') tstamp,
    f.y val_number
from
    final f,
    iot_tag t
where
    t.tagname = V_TAGNAME
    and t.record_source = V_SOURCE
$$;
 
select 'lttb' source_type,
    tagname,
    tstamp,
    val_number
from table(down_sample_lttb('DEMO', 'SIMPLE1', to_timestamp_tz('2020-01-01 00:00:00.000 +0000'), to_timestamp_tz('2020-01-01 01:23:19.000 +0000'), 20))
union all
select
    'raw' source_type,
    tagname,
    tstamp,
    val_number
from
    iot_tag_value_dv
where
    tagname = 'SIMPLE1';

